name: Generate Project Roadmap from README

on:
  workflow_dispatch:
    inputs:
      create_issues:
        description: 'Issues aus Roadmap automatisch erstellen?'
        required: false
        default: 'true'
        type: boolean

permissions:
  contents: write
  issues: write

jobs:
  generate-roadmap:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PTA_TOKEN }}

    - name: Read README.md Content
      id: read-readme
      run: |
        if [ -f "README.md" ]; then
          README_CONTENT=$(cat README.md)
          README_BASE64=$(echo "$README_CONTENT" | base64 -w 0)
          echo "readme-content=$README_BASE64" >> $GITHUB_OUTPUT
        else
          echo "❌ README.md nicht gefunden!"
          exit 1
        fi

    - name: Generate Roadmap with AI
      id: generate-roadmap
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API }}
      run: |
        cat <<EOM > system_prompt.txt
Du bist ein Senior Software Architect und DevOps Expert. Analysiere Software-Konzepte und erstelle detaillierte Entwicklungs-Roadmaps.

KRITISCHES FORMAT (EXAKT befolgen):
## PHASE X: Name
* [ ] Task
* Beschreibung

EXAMPLE:
## PHASE 1: Foundation Setup
* [ ] Repository Setup
* Erstelle Git Repository mit .gitignore für das Projekt. Setup Branching-Strategie.
* [ ] Development Environment
* Setup lokale Entwicklungsumgebung.
EOM

        README_CONTENT=$(echo "${{ steps.read-readme.outputs.readme-content }}" | base64 -d)

        PROMPT_JSON=$(python3 -c "
import json
with open('system_prompt.txt') as f:
    system_prompt = f.read()
readme_content = '''$README_CONTENT'''
prompt_data = {
    'model': 'meta-llama/llama-3.2-3b-instruct:free',
    'messages': [
        {'role': 'system', 'content': system_prompt},
        {'role': 'user', 'content': f'Analysiere dieses Software-Konzept und erstelle eine detaillierte Entwicklungs-Roadmap in Markdown:\\n\\n{readme_content}'}
    ],
    'temperature': 0.3,
    'max_tokens': 3500
}
print(json.dumps(prompt_data, ensure_ascii=False))
        ")

        echo "$PROMPT_JSON" > ai_prompt.json

        AI_RESPONSE=$(curl -s -X POST "https://openrouter.ai/api/v1/chat/completions" \
          -H "Authorization: Bearer $OPENROUTER_API_KEY" \
          -H "Content-Type: application/json" \
          -d @ai_prompt.json)

        ROADMAP_CONTENT=$(echo "$AI_RESPONSE" | jq -r '.choices[0].message.content')

        if [ -z "$ROADMAP_CONTENT" ] || [ "$ROADMAP_CONTENT" = "null" ]; then
          echo "❌ KI konnte keine Roadmap generieren. Abbruch!"
          exit 1
        fi

        echo "$ROADMAP_CONTENT" > roadmap.md
        echo "roadmap-content=$ROADMAP_CONTENT" >> $GITHUB_OUTPUT

    - name: Commit Roadmap
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add roadmap.md
        if git diff --staged --quiet; then
          echo "🔄 Keine Änderungen an roadmap.md"
        else
          git commit -m "🗺️ Generate detailed project roadmap from README.md"
          git push
        fi

    - name: Extract Tasks and Create Issues
      if: github.event.inputs.create_issues == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PTA_TOKEN }}
        script: |
          const roadmapContent = `${{ steps.generate-roadmap.outputs.roadmap-content }}`;
          const lines = roadmapContent.split('\n');
          let currentPhase = '';
          let issues = [];
          let i = 0;
          while (i < lines.length) {
            const line = lines[i].trim();
            if (line.startsWith('## PHASE')) {
              currentPhase = line.replace(/^## /, '').trim();
            } else if (line.startsWith('* [ ]')) {
              const taskTitle = line.replace('* [ ]', '').trim();
              let taskDescription = '';
              i++;
              while (i < lines.length) {
                const nextLine = lines[i].trim();
                if (nextLine.startsWith('* [ ]') || nextLine.startsWith('## PHASE')) {
                  i--;
                  break;
                }
                if (nextLine.startsWith('*') && !nextLine.startsWith('* [ ]')) {
                  taskDescription += nextLine.replace(/^\*/, '').trim() + '\n';
                } else if (nextLine.length > 0 && !nextLine.startsWith('#')) {
                  taskDescription += nextLine + '\n';
                }
                i++;
              }
              if (taskTitle && taskDescription.trim()) {
                const phaseLabel = currentPhase.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/^phase-\d+-/, '');
                issues.push({
                  title: `${taskTitle}`,
                  description: taskDescription.trim(),
                  phase: currentPhase,
                  labels: ['enhancement', 'roadmap', phaseLabel]
                });
              }
            }
            i++;
          }

          for (let index = 0; index < issues.length; index++) {
            const issue = issues[index];
            const issueBody = `## 📋 ${issue.phase}\n\n${issue.description}\n\n## ✅ Definition of Done\n- [ ] Implementierung abgeschlossen\n- [ ] Tests geschrieben und bestanden\n- [ ] Code-Review durchgeführt\n- [ ] Dokumentation aktualisiert\n- [ ] Ready for Production\n\n## 🔗 Roadmap\nDiese Aufgabe ist Teil der [Project Roadmap](./roadmap.md)\n**Task ${index + 1} von ${issues.length}**\n\n---\n*Auto-generiert aus README.md Analysis*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issue.title,
              body: issueBody,
              labels: issue.labels,
              assignees: []
            });

            await new Promise(resolve => setTimeout(resolve, 1000));
          }

    - name: Create Summary Issue
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PTA_TOKEN }}
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🗺️ Project Roadmap Generated from README.md',
            body: `## 🎉 Development Roadmap erstellt!

📋 [roadmap.md](./roadmap.md) – automatisch generiert aus der README.md

Alle Tasks wurden als Issues erstellt (sofern aktiviert).

*Powered by OpenRouter + GitHub Actions*`,
            labels: ['documentation', 'roadmap', 'meta', 'ai-generated'],
            assignees: []
          });
