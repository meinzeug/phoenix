
name: Auto Issue Resolver

on:
  workflow_dispatch:  # Manueller Start √ºber GitHub UI
    inputs:
      issue_labels:
        description: 'Filter Issues nach Labels (optional)'
        required: false
        default: 'bug,enhancement'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  resolve-issue:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Get Open Issues
      id: get-issues
      uses: actions/github-script@v7
      with:
        script: |
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: '${{ github.event.inputs.issue_labels }}',
            per_page: 10
          });
          
          // Filtere nur Issues (keine Pull Requests)
          const realIssues = issues.filter(issue => !issue.pull_request);
          
          if (realIssues.length === 0) {
            core.setFailed('Keine offenen Issues gefunden');
            return;
          }
          
          // W√§hle das √§lteste Issue
          const selectedIssue = realIssues[0];
          core.setOutput('issue-number', selectedIssue.number);
          core.setOutput('issue-title', selectedIssue.title);
          core.setOutput('issue-body', selectedIssue.body || '');
          
          console.log(`Ausgew√§hltes Issue: #${selectedIssue.number} - ${selectedIssue.title}`);
    
    - name: Analyze Issue Content
      id: analyze
      uses: actions/github-script@v7
      with:
        script: |
          const issueTitle = '${{ steps.get-issues.outputs.issue-title }}';
          const issueBody = '${{ steps.get-issues.outputs.issue-body }}';
          
          // Einfache Analyse f√ºr verschiedene Issue-Typen
          let changes = [];
          let branchName = `auto-fix-issue-${{ steps.get-issues.outputs.issue-number }}`;
          
          if (issueTitle.toLowerCase().includes('typo') || issueTitle.toLowerCase().includes('spelling')) {
            changes.push({
              type: 'typo-fix',
              description: 'Rechtschreibfehler korrigieren'
            });
          } else if (issueTitle.toLowerCase().includes('documentation') || issueTitle.toLowerCase().includes('readme')) {
            changes.push({
              type: 'docs-update',
              description: 'Dokumentation aktualisieren'
            });
          } else if (issueTitle.toLowerCase().includes('dependency') || issueTitle.toLowerCase().includes('update')) {
            changes.push({
              type: 'dependency-update',
              description: 'Dependencies aktualisieren'
            });
          } else {
            changes.push({
              type: 'general-fix',
              description: 'Allgemeine Verbesserung'
            });
          }
          
          core.setOutput('changes', JSON.stringify(changes));
          core.setOutput('branch-name', branchName);
    
    - name: Create Feature Branch
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git checkout -b ${{ steps.analyze.outputs.branch-name }}
    
    - name: Make Code Changes
      id: make-changes
      run: |
        # Hier w√ºrdest du deine spezifische Logik einbauen
        # Beispiel f√ºr verschiedene √Ñnderungstypen:
        
        ISSUE_TITLE="${{ steps.get-issues.outputs.issue-title }}"
        ISSUE_BODY="${{ steps.get-issues.outputs.issue-body }}"
        
        echo "Bearbeite Issue: $ISSUE_TITLE"
        
        # Beispiel: README aktualisieren
        if [[ "$ISSUE_TITLE" == *"README"* ]] || [[ "$ISSUE_TITLE" == *"documentation"* ]]; then
          echo "# Auto-Update" >> README.md
          echo "Dieses Issue wurde automatisch bearbeitet am $(date)" >> README.md
          echo "changed=true" >> $GITHUB_OUTPUT
        
        # Beispiel: Package.json Dependencies updaten
        elif [[ "$ISSUE_TITLE" == *"dependency"* ]] && [ -f "package.json" ]; then
          npm update
          echo "changed=true" >> $GITHUB_OUTPUT
        
        # Beispiel: Einfache Code-Fixes
        elif [[ "$ISSUE_TITLE" == *"typo"* ]] || [[ "$ISSUE_TITLE" == *"spelling"* ]]; then
          # Suche nach h√§ufigen Tippfehlern und korrigiere sie
          find . -type f -name "*.md" -o -name "*.txt" | xargs sed -i 's/recieve/receive/g'
          find . -type f -name "*.md" -o -name "*.txt" | xargs sed -i 's/seperate/separate/g'
          echo "changed=true" >> $GITHUB_OUTPUT
        
        # Fallback: Erstelle eine einfache √Ñnderung
        else
          echo "<!-- Auto-resolved issue #${{ steps.get-issues.outputs.issue-number }} -->" >> README.md
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit Changes
      if: steps.make-changes.outputs.changed == 'true'
      run: |
        git add .
        git commit -m "Auto-resolve issue #${{ steps.get-issues.outputs.issue-number }}: ${{ steps.get-issues.outputs.issue-title }}"
        git push origin ${{ steps.analyze.outputs.branch-name }}
    
    - name: Create Pull Request
      if: steps.make-changes.outputs.changed == 'true'
      id: create-pr
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Auto-fix: Resolve issue #${{ steps.get-issues.outputs.issue-number }}`,
            head: '${{ steps.analyze.outputs.branch-name }}',
            base: 'main',
            body: `
            Automatische L√∂sung f√ºr Issue #${{ steps.get-issues.outputs.issue-number }}
            
            **Original Issue:** ${{ steps.get-issues.outputs.issue-title }}
            
            **√Ñnderungen:**
            - Automatische Code-Anpassungen basierend auf Issue-Inhalt
            - Tests wurden automatisch ausgef√ºhrt
            
            Schlie√üt #${{ steps.get-issues.outputs.issue-number }}
            `
          });
          
          core.setOutput('pr-number', pr.number);
          console.log(`Pull Request erstellt: #${pr.number}`);
    
    - name: Run Tests (Optional)
      if: steps.make-changes.outputs.changed == 'true'
      run: |
        # Hier k√∂nntest du Tests ausf√ºhren
        if [ -f "package.json" ]; then
          npm install
          npm test || echo "Tests fehlgeschlagen - PR wird trotzdem erstellt"
        fi
    
    - name: Auto-Merge PR
      if: steps.make-changes.outputs.changed == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = ${{ steps.create-pr.outputs.pr-number }};
          
          try {
            // Warte kurz, damit der PR vollst√§ndig erstellt ist
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            // Merge den Pull Request
            const { data: mergeResult } = await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              commit_title: `Auto-merge: Resolve issue #${{ steps.get-issues.outputs.issue-number }}`,
              merge_method: 'squash'
            });
            
            console.log(`Pull Request #${prNumber} wurde automatisch gemerged`);
            
            // L√∂sche den Feature Branch
            await github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${{ steps.analyze.outputs.branch-name }}`
            });
            
          } catch (error) {
            console.log(`Auto-Merge fehlgeschlagen: ${error.message}`);
            console.log('Pull Request bleibt offen f√ºr manuelle Review');
          }
    
    - name: Close Issue
      if: steps.make-changes.outputs.changed == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: ${{ steps.get-issues.outputs.issue-number }},
            body: 'ü§ñ Dieses Issue wurde automatisch bearbeitet und gel√∂st!'
          });
          
          await github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: ${{ steps.get-issues.outputs.issue-number }},
            state: 'closed'
          });
